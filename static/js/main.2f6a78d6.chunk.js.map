{"version":3,"sources":["Form.js","serviceWorker.js","index.js"],"names":["Form","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","subject","name","id","price","checked","handleChange","bind","assertThisInitialized","event","target","setState","map","obj","i","value","react_default","a","createElement","className","Form_Checkbox","Form_ListView","Component","Checkbox","row","index","key","type","onClick","ListView","filter","sum","reduce","total","rows","Boolean","window","location","hostname","match","ReactDOM","render","src_Form","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2f6a78d6.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass Form extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            subject: [\n                {name:\"Computer Science\", id:1,price:12333, checked: false},\n                {name:\"Kiswahili\", id:2, price:90383, checked:false},\n                {name:\"Mathematics\", id:3,price:45555, checked:false},\n                {name:\"Networking\", id:4,price:98884,checked:false},\n                {name:\"Graphics design\", id:5,price:99999,checked:false}\n            ]\n        };\n        this.handleChange = this.handleChange.bind(this);\n       \n    }\n    handleChange(event) {\n        if(event.target.checked){\n            this.setState({\n                subject: this.state.subject.map((obj, i) =>{\n                    if( obj.name === event.target.value){\n                        obj.checked = true\n                    }\n                    return obj\n                })\n            })\n        }\n        else{\n          \n            this.setState({\n                subject: this.state.subject.map((obj, i) =>{\n                    if( obj.name === event.target.value){\n                        obj.checked = false\n                    }\n                    return obj\n                })\n            })\n        }\n       \n    }\n       \n    render(){\n        const { subject } = this.state;\n        return(\n            <div className=\"container-fluid col-md-8 jumbotron\">\n                <div className=\"row\">\n                <div className=\"col\">\n                   <form>\n                      <Checkbox \n                        subject={subject}\n                        handleChange={this.handleChange}\n                         />\n                   </form>\n               </div>\n               <div className=\"col\">\n                 <ul className=\"list-group\">\n                      <p>The selected subjects</p>\n                      <ListView subject={subject} />\n                  </ul>\n               </div>\n            </div>\n            </div>\n           \n            \n        );\n    }\n}\nconst Checkbox = props => {\n    const rows = props.subject.map((row,index) => {\n          return(\n              <div className=\"form-group\"  key={index}>\n                  <label>\n                      <input type=\"checkbox\" \n                             name=\"subject\"\n                              value={row.name}\n                            \n                              onClick={props.handleChange}\n                              />\n                      {row.name}\n                  </label>\n              </div>\n          );\n    });\n    return rows;\n\n}\n\nconst ListView = props => {\n    const checked = props.subject.filter((row,index) => {\n        return row.checked === true\n    })\n    const sum = checked.reduce((total,obj) =>{\n         return total + obj.price\n    },0)\n\n    const rows = checked.map((row,index) => {\n    \n            return(\n                    <li className=\"list-group-item\">{row.name} <span className=\"float-right\"> {row.price } </span></li>\n            );\n    })\n    return(\n        <div>\n            {rows}\n            <li className=\"list-group-item\"><b>Total</b> <span className=\"float-right\"><b>{sum}</b></span></li>\n        </div>\n    );\n}\nexport default Form;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Form from './Form';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Form />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}